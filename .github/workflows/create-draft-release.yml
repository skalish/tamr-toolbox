name: Create Draft Release
on:
  workflow_dispatch:

jobs:
  CreateDraftRelease:
    runs-on: ubuntu-20.04
    steps:
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Checkout release branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Export version
        run: echo ::set-output name=version::$(cat version.txt)
        id: get_version
      - name: Export short version
        # this sed drops the patch version from the name changing 1.2.3-axe into 1.2-axe
        run: echo ::set-output name=version::$(cat version.txt | sed "s/\([0-9]\.[0-9]\).[0-9]/\1/g")
        id: get_version_short

      - name: Install toolbox requirements
        run: python install.py
#
#      - name: Run tests
#        run: invoke test
#      - name: Run lint check
#        run: invoke lint
#      - name: Run format check
#        run: invoke format
#
#      - name: Build docs
#        run: invoke docs
#
#      - name: Install wkhtmltopdf
#        run:  sudo apt-get update && sudo apt-get install openssl build-essential xorg libssl-dev && wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz && tar xvJf wkhtmltox-0.12.4_linux-generic-amd64.tar.xz && sudo cp wkhtmltox/bin/wkhtmlto* /usr/bin/
#      - name: Create pdf
#        run: python ./doc_src/generate_pdf.py

      - name: Get tag
        id: all_tags
        run: echo ::set-output name=tags::$(git rev-list --tags --max-count=1)

      - name: Get last tag
        id: last_tag
        run: echo ::set-output name=tag::$(git describe --tags ${{ steps.all_tags.outputs.tags }})

      - name: Get last release branch
        id: last_release
        run: echo ::set-output name=branch::$(git branch -a --contains tags/${{ steps.last_tag.outputs.tag }})

      - name: Get branch base commit
        id: base_commit
        run: echo ::set-output name=commit::$(git merge-base ${{ steps.last_release.outputs.branch }} remotes/origin/develop)

      - name: Get commits since last release
        id: new_commits
        run: echo ::set-output name=commits::$(git log ${{ steps.base_commit.outputs.commit }}..HEAD --format=" - %s;" --reverse)

      - name: Construct release body
        id: body
        run: |
          RELEASE="Documentation: https://datatamer.github.io/tamr-toolbox/${{ steps.get_version_short.outputs.version }}/ ;; Highlights:;  ${{ steps.new_commits.outputs.commits }}"

          IFS=';' read -a array <<< "$RELEASE"

          echo 'release<<EOF' >> $GITHUB_ENV
          for line in "${array[@]}"
          do
            echo "$line" >> $GITHUB_ENV
          done
          echo 'EOF' >> $GITHUB_ENV


      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: ${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          body: ${{ env.release }}

#      - name: Upload pdf docs
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./docs/_draft_build/tamr-toolbox.pdf
#          asset_name: tamr_toolbox_${{ steps.get_version.outputs.version }}.pdf
#          asset_content_type: application/pdf
